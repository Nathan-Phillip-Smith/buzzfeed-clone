{"ast":null,"code":"var _jsxFileName = \"/Users/nathansmith/Desktop/react-buzzfeed-clone/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Title from './components/Title';\nimport QuestionsBlock from './components/QuestionsBlock';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [quiz, setQuiz] = useState(false);\n  const [chosenAnswerItems, setChosenAnswerItems] = useState([]);\n  const [unansweredQuestionIds, setUnansweredQuestionIds] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/quiz');\n      const json = await response.json();\n      setQuiz(json);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  useEffect(() => {\n    var _quiz$content;\n    const unansweredIds = quiz === null || quiz === void 0 ? void 0 : (_quiz$content = quiz.content) === null || _quiz$content === void 0 ? void 0 : _quiz$content.map(_ref => {\n      let {\n        id\n      } = _ref;\n      return id;\n    });\n    setUnansweredQuestionIds(unansweredIds);\n  }, [quiz]);\n  useEffect(() => {\n    if (unansweredQuestionIds) {}\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      title: quiz === null || quiz === void 0 ? void 0 : quiz.title,\n      subtitle: quiz === null || quiz === void 0 ? void 0 : quiz.subtitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), quiz && (quiz === null || quiz === void 0 ? void 0 : quiz.content.map(contentItem => /*#__PURE__*/_jsxDEV(QuestionsBlock, {\n      quizItem: contentItem,\n      setChosenAnswerItems: setChosenAnswerItems,\n      chosenAnswerItems: chosenAnswerItems,\n      setUnansweredQuestionIds: setUnansweredQuestionIds,\n      unansweredQuestionIds: unansweredQuestionIds\n    }, contentItem.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this)))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"eDj/ZHrtGzZiP8Tw/YocPOMbmlc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Title","QuestionsBlock","jsxDEV","_jsxDEV","App","_s","quiz","setQuiz","chosenAnswerItems","setChosenAnswerItems","unansweredQuestionIds","setUnansweredQuestionIds","fetchData","response","fetch","json","err","console","log","_quiz$content","unansweredIds","content","map","_ref","id","className","children","title","subtitle","fileName","_jsxFileName","lineNumber","columnNumber","contentItem","quizItem","_c","$RefreshReg$"],"sources":["/Users/nathansmith/Desktop/react-buzzfeed-clone/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport Title from './components/Title'\nimport QuestionsBlock from './components/QuestionsBlock'\n\nconst App = () => {\n    const [quiz, setQuiz] = useState(false)\n    const [chosenAnswerItems, setChosenAnswerItems] = useState([])\n    const [unansweredQuestionIds, setUnansweredQuestionIds] = useState([])\n\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/quiz');\n        const json = await response.json()\n        setQuiz(json)\n      } catch (err) {\n        console.log(err)\n      }\n    }\n\n    useEffect(() => {\n      fetchData() \n    }, [])\n\n    useEffect(() => {\n      const unansweredIds = quiz?.content?.map(({ id }) => id)\n      setUnansweredQuestionIds(unansweredIds)\n    }, [quiz])\n\n    useEffect(() => {\n      if (unansweredQuestionIds) {\n        \n      }\n    }, [])\n\n\n\n  return (\n    <div  className=\"app\">\n      <Title title={quiz?.title} subtitle={quiz?.subtitle}/>\n        {quiz && quiz?.content.map(contentItem => (\n          <QuestionsBlock \n            key={contentItem.id}\n            quizItem={contentItem} \n            setChosenAnswerItems={setChosenAnswerItems}\n            chosenAnswerItems={chosenAnswerItems}\n            setUnansweredQuestionIds={setUnansweredQuestionIds}\n            unansweredQuestionIds={unansweredQuestionIds}\n          />\n        ))}\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,cAAc,MAAM,6BAA6B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACU,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACY,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAGtE,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;MAC1D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,EAAE;MAClCR,OAAO,CAACQ,IAAI,CAAC;IACf,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACda,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EAENb,SAAS,CAAC,MAAM;IAAA,IAAAoB,aAAA;IACd,MAAMC,aAAa,GAAGd,IAAI,aAAJA,IAAI,wBAAAa,aAAA,GAAJb,IAAI,CAAEe,OAAO,cAAAF,aAAA,uBAAbA,aAAA,CAAeG,GAAG,CAACC,IAAA;MAAA,IAAC;QAAEC;MAAG,CAAC,GAAAD,IAAA;MAAA,OAAKC,EAAE;IAAA,EAAC;IACxDb,wBAAwB,CAACS,aAAa,CAAC;EACzC,CAAC,EAAE,CAACd,IAAI,CAAC,CAAC;EAEVP,SAAS,CAAC,MAAM;IACd,IAAIW,qBAAqB,EAAE,CAE3B;EACF,CAAC,EAAE,EAAE,CAAC;EAIR,oBACEP,OAAA;IAAMsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACnBvB,OAAA,CAACH,KAAK;MAAC2B,KAAK,EAAErB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEqB,KAAM;MAACC,QAAQ,EAAEtB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsB;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,EACnD1B,IAAI,KAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEe,OAAO,CAACC,GAAG,CAACW,WAAW,iBACpC9B,OAAA,CAACF,cAAc;MAEbiC,QAAQ,EAAED,WAAY;MACtBxB,oBAAoB,EAAEA,oBAAqB;MAC3CD,iBAAiB,EAAEA,iBAAkB;MACrCG,wBAAwB,EAAEA,wBAAyB;MACnDD,qBAAqB,EAAEA;IAAsB,GALxCuB,WAAW,CAACT,EAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAOtB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEA;AAEV,CAAC;AAAA3B,EAAA,CAjDKD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAmDT,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}